// utils/levelSystem.js

const fs = require('fs');
const path = require('path');
const { EmbedBuilder } = require('discord.js'); // EmbedBuilder'Ä± ekledik

const levelsPath = path.join(__dirname, '../data/levels.json'); // Seviye verileri iÃ§in ayrÄ± JSON
const systemSettingsPath = path.join(__dirname, '../data/systemSettings.json'); // Sistem ayarlarÄ± iÃ§in ayrÄ± JSON

// YardÄ±mcÄ± fonksiyon: Seviye veritabanÄ±ndan verileri oku
const readLevels = () => {
Â  Â  if (!fs.existsSync(levelsPath)) {
Â  Â  Â  Â  return { users: {} };
Â  Â  }
Â  Â  const data = fs.readFileSync(levelsPath, 'utf8');
Â  Â  return JSON.parse(data);
};

// YardÄ±mcÄ± fonksiyon: Seviye veritabanÄ±na verileri yaz
const writeLevels = (data) => {
Â  Â  fs.writeFileSync(levelsPath, JSON.stringify(data, null, 2), 'utf8');
};

// YardÄ±mcÄ± fonksiyon: Sistem ayarlarÄ±nÄ± oku
const readSystemSettings = () => {
Â  Â  if (!fs.existsSync(systemSettingsPath)) {
Â  Â  Â  Â  return { 
Â  Â  Â  Â  Â  Â  saas: { active: false },
Â  Â  Â  Â  Â  Â  gunaydin: { active: false },
Â  Â  Â  Â  Â  Â  haberSistemi: { active: false, lastCheck: 0, nextCheck: 0 },
Â  Â  Â  Â  Â  Â  menuluRolSistemi: { active: false, channelId: null, messageId: null },
Â  Â  Â  Â  Â  Â  levelSystem: { active: false, channelId: null, xpPerMessage: 15 }, // VarsayÄ±lan deÄŸerler
Â  Â  Â  Â  Â  Â  unvanSystem: { active: false } // VarsayÄ±lan deÄŸer
Â  Â  Â  Â  };
Â  Â  }
Â  Â  const data = fs.readFileSync(systemSettingsPath, 'utf8');
Â  Â  return JSON.parse(data);
};

// YardÄ±mcÄ± fonksiyon: Sistem ayarlarÄ±nÄ± yaz
const writeSystemSettings = (data) => {
Â  Â  fs.writeFileSync(systemSettingsPath, JSON.stringify(data, null, 2), 'utf8');
};

const getSystemSettings = () => {
Â  Â  return readSystemSettings();
};

const saveSystemSettings = (settings) => {
Â  Â  writeSystemSettings(settings);
};

// XP hesaplama fonksiyonu (logaritmik veya doÄŸrusal olabilir)
const getRequiredXP = (level) => {
Â  Â  return 100 * Math.pow(1.5, level); 
};

// KullanÄ±cÄ± verilerini almak iÃ§in yeni fonksiyon
const getUserLevelData = (userId) => {
Â  Â  const levels = readLevels();
Â  Â  if (!levels.users[userId]) {
Â  Â  Â  Â  levels.users[userId] = { level: 0, xp: 0, totalXP: 0, lastMessageTime: 0, activityMessageCount: 0 };
Â  Â  Â  Â  writeLevels(levels);
Â  Â  }
Â  Â  return levels.users[userId];
};

// KullanÄ±cÄ±ya XP verme fonksiyonu
const giveXP = async (message, client) => {
Â  Â  const settings = getSystemSettings();
Â  Â  if (!settings.levelSystem || !settings.levelSystem.active) {
Â  Â  Â  Â  return; // Seviye sistemi kapalÄ±ysa XP verme
Â  Â  }
Â  Â  const userId = message.author.id;
Â  Â  const levels = readLevels(); // GÃ¼ncel seviye verilerini oku
Â  Â  const userData = levels.users[userId] || { level: 0, xp: 0, totalXP: 0, lastMessageTime: 0, activityMessageCount: 0 };
Â  Â  const xpPerMessage = settings.levelSystem.xpPerMessage || 15; // VarsayÄ±lan 15 XP

Â  Â  // Anti-spam kontrolÃ¼: Son mesajdan bu yana belirli bir sÃ¼re geÃ§meli
Â  Â  const COOLDOWN_SECONDS = 60; // 60 saniye cooldown
Â  Â  const now = Date.now();
Â  Â  if (now - userData.lastMessageTime < (COOLDOWN_SECONDS * 1000)) {
Â  Â  Â  Â  return; // Cooldown sÃ¼resi dolmadÄ±ysa XP verme
Â  Â  }

Â  Â  userData.xp += xpPerMessage;
Â  Â  userData.totalXP += xpPerMessage; // Toplam kazanÄ±lan XP
Â  Â  userData.lastMessageTime = now; // Son mesaj zamanÄ±nÄ± gÃ¼ncelle
Â  Â  userData.activityMessageCount = (userData.activityMessageCount || 0) + 1; // Aktivite sayacÄ±nÄ± artÄ±r

Â  Â  let levelUp = false;
Â  Â  let newLevel = userData.level;

Â  Â  while (userData.xp >= getRequiredXP(newLevel)) {
Â  Â  Â  Â  userData.xp -= getRequiredXP(newLevel);
Â  Â  Â  Â  newLevel++;
Â  Â  Â  Â  levelUp = true;
Â  Â  }

Â  Â  if (levelUp) {
Â  Â  Â  Â  userData.level = newLevel;
Â  Â  Â  Â  await levelUpNotification(message, newLevel, client); // levelUpNotification fonksiyonunu Ã§aÄŸÄ±r
Â  Â  }

Â  Â  // Verileri gÃ¼ncelle ve kaydet
Â  Â  levels.users[userId] = userData;
Â  Â  writeLevels(levels);
};

// Seviye atlama bildirimi
const levelUpNotification = async (message, newLevel, client) => {
Â  Â  const settings = getSystemSettings();
Â  Â  const notificationChannelId = settings.levelSystem.channelId;
Â  Â  if (!notificationChannelId) {
Â  Â  Â  Â  console.warn('Seviye atlama bildirim kanalÄ± ayarlanmamÄ±ÅŸ.');
Â  Â  Â  Â  return;
Â  Â  }

Â  Â  const channel = client.channels.cache.get(notificationChannelId);
Â  Â  if (!channel) {
Â  Â  Â  Â  console.error(`Seviye atlama bildirim kanalÄ± bulunamadÄ±: ${notificationChannelId}`);
Â  Â  Â  Â  return;
Â  Â  }

Â  Â  const user = message.author; // Seviye atlayan kullanÄ±cÄ±yÄ± al

Â  Â  const embed = new EmbedBuilder()
Â  Â  Â  Â  .setColor('#00FF00') // YeÅŸil renk
Â  Â  Â  Â  .setTitle('ðŸŽ‰ Seviye AtladÄ±n! ðŸŽ‰')
Â  Â  Â  Â  .setDescription(`Harika bir iÅŸ Ã§Ä±kardÄ±n, yeni seviyen: **\`${newLevel}\`**!`) // Description gÃ¼ncellendi
Â  Â  Â  Â  .addFields(
Â  Â  Â  Â  Â  Â  { name: 'ðŸŒŸ Yeni Seviye', value: `**\`${newLevel}\`**`, inline: true },
Â  Â  Â  Â  Â  Â  { name: 'ðŸš€ Yolun AÃ§Ä±k Olsun!', value: `Bir sonraki seviye iÃ§in durmak yok, yola devam!`, inline: true }
Â  Â  Â  Â  )
Â  Â  Â  Â  .setThumbnail(user.displayAvatarURL({ dynamic: true })) // KullanÄ±cÄ±nÄ±n avatarÄ±nÄ± ekle
Â  Â  Â  Â  .setFooter({ text: 'SomeSub Bot | Seviye Sistemi', iconURL: client.user.displayAvatarURL() })
Â  Â  Â  Â  .setTimestamp();

Â  Â  // KullanÄ±cÄ±yÄ± embed'in dÄ±ÅŸÄ±nda etiketleyerek bildirim gÃ¶nder
Â  Â  await channel.send({ 
Â  Â  Â  Â  content: `Tebrikler, <@${user.id}>!`, // Etiketleme burada yapÄ±ldÄ±
Â  Â  Â  Â  embeds: [embed]
Â  Â  });
};

// XP ekleme (yÃ¶netim komutlarÄ± iÃ§in)
const addXP = async (userId, amount, member, client) => {
Â  Â  const levels = readLevels();
Â  Â  const userData = levels.users[userId] || { level: 0, xp: 0, totalXP: 0, lastMessageTime: 0, activityMessageCount: 0 };
Â  Â  
Â  Â  userData.xp += amount;
Â  Â  userData.totalXP += amount;
Â  Â  let levelUp = false;
Â  Â  let newLevel = userData.level;
Â  Â  while (userData.xp >= getRequiredXP(newLevel)) {
Â  Â  Â  Â  userData.xp -= getRequiredXP(newLevel);
Â  Â  Â  Â  newLevel++;
Â  Â  Â  Â  levelUp = true;
Â  Â  }
Â  Â  if (levelUp) {
Â  Â  Â  Â  userData.level = newLevel;
Â  Â  Â  Â  if (member && client) {
Â  Â  Â  Â  Â  Â  const message = { author: { id: userId, username: member.user.username, displayAvatarURL: member.user.displayAvatarURL }, guild: { id: member.guild.id } };
Â  Â  Â  Â  Â  Â  await levelUpNotification(message, newLevel, client);
Â  Â  Â  Â  }
Â  Â  }
Â  Â  levels.users[userId] = userData;
Â  Â  writeLevels(levels);
Â  Â  return true;
};

// XP silme (yÃ¶netim komutlarÄ± iÃ§in)
const removeXP = async (userId, amount, member, client) => {
Â  Â  const levels = readLevels();
Â  Â  const userData = levels.users[userId] || { level: 0, xp: 0, totalXP: 0, lastMessageTime: 0, activityMessageCount: 0 };
Â  Â  userData.xp = Math.max(0, userData.xp - amount);
Â  Â  userData.totalXP = Math.max(0, userData.totalXP - amount);
Â  Â  let levelDown = false;
Â  Â  let newLevel = userData.level;
Â  Â  while (userData.xp < 0 && newLevel > 0) {
Â  Â  Â  Â  newLevel--;
Â  Â  Â  Â  userData.xp += getRequiredXP(newLevel);
Â  Â  Â  Â  levelDown = true;
Â  Â  }
Â  Â  if (newLevel < 0) {
Â  Â  Â  Â  newLevel = 0;
Â  Â  Â  Â  userData.xp = 0;
Â  Â  Â  Â  userData.totalXP = 0;
Â  Â  }
Â  Â  if (levelDown) {
Â  Â  Â  Â  userData.level = newLevel;
Â  Â  }
Â  Â  levels.users[userId] = userData;
Â  Â  writeLevels(levels);
Â  Â  return true;
};

// Seviye ayarlama (yÃ¶netim komutlarÄ± iÃ§in)
const setLevel = async (userId, level, member, client) => {
Â  Â  const levels = readLevels();
Â  Â  const userData = levels.users[userId] || { level: 0, xp: 0, totalXP: 0, lastMessageTime: 0, activityMessageCount: 0 };
Â  Â  userData.level = level;
Â  Â  userData.xp = 0;
Â  Â  let totalXpForNewLevel = 0;
Â  Â  for (let i = 0; i < level; i++) {
Â  Â  Â  Â  totalXpForNewLevel += getRequiredXP(i);
Â  Â  }
Â  Â  userData.totalXP = totalXpForNewLevel;
Â  Â  if (member && client && userData.level < level) {
Â  Â  Â  Â  Â const message = { author: { id: userId, username: member.user.username, displayAvatarURL: member.user.displayAvatarURL }, guild: { id: member.guild.id } };
Â  Â  Â  Â  Â await levelUpNotification(message, level, client);
Â  Â  }
Â  Â  levels.users[userId] = userData;
Â  Â  writeLevels(levels);
Â  Â  return true;
};

// Seviye sÄ±fÄ±rlama (yÃ¶netim komutlarÄ± iÃ§in)
const resetLevel = (userId) => {
Â  Â  const levels = readLevels();
Â  Â  if (!levels.users[userId]) return false;
Â  Â  levels.users[userId] = { level: 0, xp: 0, totalXP: 0, lastMessageTime: 0, activityMessageCount: 0 };
Â  Â  writeLevels(levels);
Â  Â  return true;
};

// TÃ¼m seviyeleri sÄ±fÄ±rlama (bot sahibi komutu iÃ§in)
const resetAllLevels = () => {
Â  Â  writeLevels({ users: {} }); // TÃ¼m kullanÄ±cÄ± verilerini sÄ±fÄ±rla
Â  Â  return true;
};

// TÃ¼m kullanÄ±cÄ±larÄ±n seviye verilerini Ã§ekme (sÄ±ralama iÃ§in)
const getAllUserLevels = () => {
Â  Â  const levels = readLevels();
Â  Â  return Object.keys(levels.users).map(userId => ({
Â  Â  Â  Â  userID: userId,
Â  Â  Â  Â  level: levels.users[userId].level || 0,
Â  Â  Â  Â  xp: levels.users[userId].xp || 0,
Â  Â  Â  Â  totalXP: levels.users[userId].totalXP || 0
Â  Â  }));
};

// Seviye sistemi durumunu ayarla
const setLevelSystemStatus = (status, channelId = null, xpPerMessage = 15) => {
Â  Â  const settings = getSystemSettings();
Â  Â  settings.levelSystem = {
Â  Â  Â  Â  active: status,
Â  Â  Â  Â  channelId: channelId,
Â  Â  Â  Â  xpPerMessage: xpPerMessage
Â  Â  };
Â  Â  saveSystemSettings(settings);
};

// Mesaj baÅŸÄ±na verilecek XP miktarÄ±nÄ± ayarla
const setXPPerMessage = (amount) => {
Â  Â  const settings = getSystemSettings();
Â  Â  if (!settings.levelSystem) settings.levelSystem = {};
Â  Â  settings.levelSystem.xpPerMessage = amount;
Â  Â  saveSystemSettings(settings);
};

module.exports = {
Â  Â  giveXP,
Â  Â  getRequiredXP,
Â  Â  getUserLevelData,
Â  Â  addXP,
Â  Â  removeXP,
Â  Â  setLevel,
Â  Â  resetLevel,
Â  Â  resetAllLevels,
Â  Â  getAllUserLevels,
Â  Â  setLevelSystemStatus,
Â  Â  setXPPerMessage
};